{"version":3,"sources":["../../../../../lib/xlsx/xform/sheet/ext-lst-xform.js"],"names":["BaseXform","require","ConditionalFormattingsExt","ExtLstXform","map","xmlStream","model","hasContent","addRollback","openNode","uri","cfCursor","cursor","render","conditionalFormattings","closeNode","commit","rollback","node","parser","parseOpen","name","text","parseText","parseClose","undefined","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAMC,yBAAyB,GAAGD,OAAO,CAAC,wCAAD,CAAzC;;IAEME,W;;;;;AACJ,yBAAc;AAAA;;AAAA;;AACZ;AACA,UAAKC,GAAL,GAAW;AACT,oCAA8B,IAAIF,yBAAJ;AADrB,KAAX;AAFY;AAKb;;;;2BAMMG,S,EAAWC,K,EAAO;AACvB,UAAIC,UAAU,GAAG,KAAjB;AACAF,MAAAA,SAAS,CAACG,WAAV;AACAH,MAAAA,SAAS,CAACI,QAAV,CAAmB,QAAnB,EAHuB,CAKvB;;AACAJ,MAAAA,SAAS,CAACI,QAAV,CAAmB,KAAnB,EAA0B;AACxBC,QAAAA,GAAG,EAAE,wCADmB;AAExB,qBAAa;AAFW,OAA1B;AAIA,UAAMC,QAAQ,GAAGN,SAAS,CAACO,MAA3B;AACA,WAAKR,GAAL,CAAS,4BAAT,EAAuCS,MAAvC,CAA8CP,KAAK,CAACQ,sBAApD;AACAP,MAAAA,UAAU,GAAGA,UAAU,IAAKI,QAAQ,KAAKN,SAAS,CAACO,MAAnD;AACAP,MAAAA,SAAS,CAACU,SAAV;AAEAV,MAAAA,SAAS,CAACU,SAAV;;AACA,UAAIR,UAAJ,EAAgB;AACdF,QAAAA,SAAS,CAACW,MAAV;AACD,OAFD,MAEO;AACLX,QAAAA,SAAS,CAACY,QAAV;AACD;AACF;;;8BAESC,I,EAAM;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD;;AAED,cAAQA,IAAI,CAACG,IAAb;AACE,aAAK,QAAL;AACE,eAAKf,KAAL,GAAa,EAAb;AACA,iBAAO,IAAP;;AACF,aAAK,KAAL;AACE,iBAAO,IAAP;;AACF;AACE,eAAKa,MAAL,GAAc,KAAKf,GAAL,CAASc,IAAI,CAACG,IAAd,CAAd;;AACA,cAAI,KAAKF,MAAT,EAAiB;AACf,iBAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACD;;AACD,iBAAO,IAAP;AAXJ;AAaD;;;8BAESI,I,EAAM;AACd,UAAI,KAAKH,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYI,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;+BAEUD,I,EAAM;AACf,UAAI,KAAKF,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYK,UAAZ,CAAuBH,IAAvB,CAAL,EAAmC;AACjC,eAAKF,MAAL,GAAcM,SAAd;AACD;;AACD,eAAO,IAAP;AACD;;AAED,aAAQJ,IAAI,KAAK,SAAjB;AACD;;;wBA/DS;AACR,aAAO,QAAP;AACD;;;;EAVuBrB,S;;AA0E1B0B,MAAM,CAACC,OAAP,GAAiBxB,WAAjB","sourcesContent":["const BaseXform = require('../base-xform');\n\nconst ConditionalFormattingsExt = require('./cf/conditional-formattings-ext-xform');\n\nclass ExtLstXform extends BaseXform {\n  constructor() {\n    super();\n    this.map = {\n      'x14:conditionalFormattings': new ConditionalFormattingsExt(),\n    };\n  }\n\n  get tag() {\n    return 'extLst';\n  }\n\n  render(xmlStream, model) {\n    let hasContent = false;\n    xmlStream.addRollback();\n    xmlStream.openNode('extLst');\n\n    // conditional formatting\n    xmlStream.openNode('ext', {\n      uri: '{78C0D931-6437-407d-A8EE-F0AAD7539E65}',\n      'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main',\n    });\n    const cfCursor = xmlStream.cursor;\n    this.map['x14:conditionalFormattings'].render(model.conditionalFormattings);\n    hasContent = hasContent || (cfCursor !== xmlStream.cursor);\n    xmlStream.closeNode();\n\n    xmlStream.closeNode();\n    if (hasContent) {\n      xmlStream.commit();\n    } else {\n      xmlStream.rollback();\n    }\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case 'extLst':\n        this.model = {};\n        return true;\n      case 'ext':\n        return true;\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n        }\n        return true;\n    }\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.parser = undefined;\n      }\n      return true;\n    }\n\n    return (name !== 'extList');\n  }\n}\n\nmodule.exports = ExtLstXform;\n"],"file":"ext-lst-xform.js"}