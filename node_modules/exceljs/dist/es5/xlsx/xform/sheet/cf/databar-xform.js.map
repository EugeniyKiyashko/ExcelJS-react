{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/databar-xform.js"],"names":["BaseXform","require","ColorXform","CfvoXform","DatabarXform","map","cfvo","cfvoXform","color","colorXform","xmlStream","model","openNode","tag","forEach","render","closeNode","node","parser","parseOpen","name","text","parseText","parseClose","push","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AAEA,IAAMC,UAAU,GAAGD,OAAO,CAAC,yBAAD,CAA1B;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;IAEMG,Y;;;;;AACJ,0BAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,GAAL,GAAW;AACTC,MAAAA,IAAI,EAAE,MAAKC,SAAL,GAAiB,IAAIJ,SAAJ,EADd;AAETK,MAAAA,KAAK,EAAE,MAAKC,UAAL,GAAkB,IAAIP,UAAJ;AAFhB,KAAX;AAHY;AAOb;;;;2BAMMQ,S,EAAWC,K,EAAO;AAAA;;AACvBD,MAAAA,SAAS,CAACE,QAAV,CAAmB,KAAKC,GAAxB;AAEAF,MAAAA,KAAK,CAACL,IAAN,CAAWQ,OAAX,CAAmB,UAAAR,IAAI,EAAI;AACzB,QAAA,MAAI,CAACC,SAAL,CAAeQ,MAAf,CAAsBL,SAAtB,EAAiCJ,IAAjC;AACD,OAFD;AAGAK,MAAAA,KAAK,CAACH,KAAN,CAAYM,OAAZ,CAAoB,UAAAN,KAAK,EAAI;AAC3B,QAAA,MAAI,CAACC,UAAL,CAAgBM,MAAhB,CAAuBL,SAAvB,EAAkCF,KAAlC;AACD,OAFD;AAIAE,MAAAA,SAAS,CAACM,SAAV;AACD;;;8BAESC,I,EAAM;AACd,UAAI,KAAKC,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,eAAO,IAAP;AACD;;AAED,cAAQA,IAAI,CAACG,IAAb;AACE,aAAK,KAAKP,GAAV;AACE,eAAKF,KAAL,GAAa;AACXL,YAAAA,IAAI,EAAE,EADK;AAEXE,YAAAA,KAAK,EAAE;AAFI,WAAb;AAIA;;AAEF;AACE,eAAKU,MAAL,GAAc,KAAKb,GAAL,CAASY,IAAI,CAACG,IAAd,CAAd;;AACA,cAAI,KAAKF,MAAT,EAAiB;AACf,iBAAKA,MAAL,CAAYC,SAAZ,CAAsBF,IAAtB;AACA,mBAAO,IAAP;AACD;;AAbL;;AAeA,aAAO,KAAP;AACD;;;8BAESI,I,EAAM;AACd,UAAI,KAAKH,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYI,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;+BAEUD,I,EAAM;AACf,UAAI,KAAKF,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYK,UAAZ,CAAuBH,IAAvB,CAAL,EAAmC;AACjC,eAAKT,KAAL,CAAWS,IAAX,EAAiBI,IAAjB,CAAsB,KAAKN,MAAL,CAAYP,KAAlC;AACA,eAAKO,MAAL,GAAc,IAAd;AACD;;AACD,eAAO,IAAP;AACD;;AACD,aAAOE,IAAI,KAAK,KAAKP,GAArB;AACD;;;wBAxDS;AACR,aAAO,SAAP;AACD;;;;EAZwBb,S;;AAqE3ByB,MAAM,CAACC,OAAP,GAAiBtB,YAAjB","sourcesContent":["const BaseXform = require('../../base-xform');\n\nconst ColorXform = require('../../style/color-xform');\nconst CfvoXform = require('./cfvo-xform');\n\nclass DatabarXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.map = {\n      cfvo: this.cfvoXform = new CfvoXform(),\n      color: this.colorXform = new ColorXform(),\n    };\n  }\n\n  get tag() {\n    return 'dataBar';\n  }\n\n  render(xmlStream, model) {\n    xmlStream.openNode(this.tag);\n\n    model.cfvo.forEach(cfvo => {\n      this.cfvoXform.render(xmlStream, cfvo);\n    });\n    model.color.forEach(color => {\n      this.colorXform.render(xmlStream, color);\n    });\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    switch (node.name) {\n      case this.tag:\n        this.model = {\n          cfvo: [],\n          color: [],\n        };\n        break;\n\n      default:\n        this.parser = this.map[node.name];\n        if (this.parser) {\n          this.parser.parseOpen(node);\n          return true;\n        }\n    }\n    return false;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model[name].push(this.parser.model);\n        this.parser = null;\n      }\n      return true;\n    }\n    return name !== this.tag;\n  }\n}\n\nmodule.exports = DatabarXform;\n"],"file":"databar-xform.js"}