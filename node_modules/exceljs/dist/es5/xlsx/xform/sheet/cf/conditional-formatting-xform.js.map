{"version":3,"sources":["../../../../../../lib/xlsx/xform/sheet/cf/conditional-formatting-xform.js"],"names":["BaseXform","require","CfRuleXform","ConditionalFormattingXform","map","cfRule","xmlStream","model","rules","some","isPrimitive","openNode","tag","sqref","ref","forEach","rule","render","closeNode","node","parser","name","parseOpen","attributes","text","parseText","parseClose","push","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AAEA,IAAMC,WAAW,GAAGD,OAAO,CAAC,iBAAD,CAA3B;;IAEME,0B;;;;;AACJ,wCAAc;AAAA;;AAAA;;AACZ;AAEA,UAAKC,GAAL,GAAW;AACTC,MAAAA,MAAM,EAAE,IAAIH,WAAJ;AADC,KAAX;AAHY;AAMb;;;;2BAMMI,S,EAAWC,K,EAAO;AAAA;;AACvB;AACA,UAAI,CAACA,KAAK,CAACC,KAAN,CAAYC,IAAZ,CAAiBP,WAAW,CAACQ,WAA7B,CAAL,EAAgD;AAC9C;AACD;;AAEDJ,MAAAA,SAAS,CAACK,QAAV,CAAmB,KAAKC,GAAxB,EAA6B;AAACC,QAAAA,KAAK,EAAEN,KAAK,CAACO;AAAd,OAA7B;AAEAP,MAAAA,KAAK,CAACC,KAAN,CAAYO,OAAZ,CAAoB,UAAAC,IAAI,EAAI;AAC1B,YAAId,WAAW,CAACQ,WAAZ,CAAwBM,IAAxB,CAAJ,EAAmC;AACjCA,UAAAA,IAAI,CAACF,GAAL,GAAWP,KAAK,CAACO,GAAjB;;AACA,UAAA,MAAI,CAACV,GAAL,CAASC,MAAT,CAAgBY,MAAhB,CAAuBX,SAAvB,EAAkCU,IAAlC;AACD;AACF,OALD;AAOAV,MAAAA,SAAS,CAACY,SAAV;AACD;;;8BAESC,I,EAAM;AACd,WAAKC,MAAL,GAAc,KAAKA,MAAL,IAAe,KAAKhB,GAAL,CAASe,IAAI,CAACE,IAAd,CAA7B;;AACA,UAAI,KAAKD,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYE,SAAZ,CAAsBH,IAAtB;AACA,eAAO,IAAP;AACD;;AAED,UAAIA,IAAI,CAACE,IAAL,KAAc,KAAKT,GAAvB,EAA4B;AAC1B,aAAKL,KAAL,GAAa;AACXO,UAAAA,GAAG,EAAEK,IAAI,CAACI,UAAL,CAAgBV,KADV;AAEXL,UAAAA,KAAK,EAAE;AAFI,SAAb;AAIA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;;;8BAESgB,I,EAAM;AACd,UAAI,KAAKJ,MAAT,EAAiB;AACf,aAAKA,MAAL,CAAYK,SAAZ,CAAsBD,IAAtB;AACD;AACF;;;+BAEUH,I,EAAM;AACf,UAAI,KAAKD,MAAT,EAAiB;AACf,YAAI,CAAC,KAAKA,MAAL,CAAYM,UAAZ,CAAuBL,IAAvB,CAAL,EAAmC;AACjC,eAAKd,KAAL,CAAWC,KAAX,CAAiBmB,IAAjB,CAAsB,KAAKP,MAAL,CAAYb,KAAlC;AACA,eAAKa,MAAL,GAAc,IAAd;AACD;;AACD,eAAO,IAAP;AACD;;AACD,aAAOC,IAAI,KAAK,KAAKT,GAArB;AACD;;;wBAvDS;AACR,aAAO,uBAAP;AACD;;;;EAXsCZ,S;;AAmEzC4B,MAAM,CAACC,OAAP,GAAiB1B,0BAAjB","sourcesContent":["const BaseXform = require('../../base-xform');\n\nconst CfRuleXform = require('./cf-rule-xform');\n\nclass ConditionalFormattingXform extends BaseXform {\n  constructor() {\n    super();\n\n    this.map = {\n      cfRule: new CfRuleXform(),\n    };\n  }\n\n  get tag() {\n    return 'conditionalFormatting';\n  }\n\n  render(xmlStream, model) {\n    // if there are no primitive rules, exit now\n    if (!model.rules.some(CfRuleXform.isPrimitive)) {\n      return;\n    }\n\n    xmlStream.openNode(this.tag, {sqref: model.ref});\n\n    model.rules.forEach(rule => {\n      if (CfRuleXform.isPrimitive(rule)) {\n        rule.ref = model.ref;\n        this.map.cfRule.render(xmlStream, rule);\n      }\n    });\n\n    xmlStream.closeNode();\n  }\n\n  parseOpen(node) {\n    this.parser = this.parser || this.map[node.name];\n    if (this.parser) {\n      this.parser.parseOpen(node);\n      return true;\n    }\n\n    if (node.name === this.tag) {\n      this.model = {\n        ref: node.attributes.sqref,\n        rules: [],\n      };\n      return true;\n    }\n\n    return false;\n  }\n\n  parseText(text) {\n    if (this.parser) {\n      this.parser.parseText(text);\n    }\n  }\n\n  parseClose(name) {\n    if (this.parser) {\n      if (!this.parser.parseClose(name)) {\n        this.model.rules.push(this.parser.model);\n        this.parser = null;\n      }\n      return true;\n    }\n    return name !== this.tag;\n  }\n}\n\nmodule.exports = ConditionalFormattingXform;\n"],"file":"conditional-formatting-xform.js"}