"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var BaseXform = require('../base-xform');

var ConditionalFormattingsExt = require('./cf/conditional-formattings-ext-xform');

var ExtLstXform =
/*#__PURE__*/
function (_BaseXform) {
  _inherits(ExtLstXform, _BaseXform);

  function ExtLstXform() {
    var _this;

    _classCallCheck(this, ExtLstXform);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExtLstXform).call(this));
    _this.map = {
      'x14:conditionalFormattings': new ConditionalFormattingsExt()
    };
    return _this;
  }

  _createClass(ExtLstXform, [{
    key: "render",
    value: function render(xmlStream, model) {
      var hasContent = false;
      xmlStream.addRollback();
      xmlStream.openNode('extLst'); // conditional formatting

      xmlStream.openNode('ext', {
        uri: '{78C0D931-6437-407d-A8EE-F0AAD7539E65}',
        'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main'
      });
      var cfCursor = xmlStream.cursor;
      this.map['x14:conditionalFormattings'].render(model.conditionalFormattings);
      hasContent = hasContent || cfCursor !== xmlStream.cursor;
      xmlStream.closeNode();
      xmlStream.closeNode();

      if (hasContent) {
        xmlStream.commit();
      } else {
        xmlStream.rollback();
      }
    }
  }, {
    key: "parseOpen",
    value: function parseOpen(node) {
      if (this.parser) {
        this.parser.parseOpen(node);
        return true;
      }

      switch (node.name) {
        case 'extLst':
          this.model = {};
          return true;

        case 'ext':
          return true;

        default:
          this.parser = this.map[node.name];

          if (this.parser) {
            this.parser.parseOpen(node);
          }

          return true;
      }
    }
  }, {
    key: "parseText",
    value: function parseText(text) {
      if (this.parser) {
        this.parser.parseText(text);
      }
    }
  }, {
    key: "parseClose",
    value: function parseClose(name) {
      if (this.parser) {
        if (!this.parser.parseClose(name)) {
          this.parser = undefined;
        }

        return true;
      }

      return name !== 'extList';
    }
  }, {
    key: "tag",
    get: function get() {
      return 'extLst';
    }
  }]);

  return ExtLstXform;
}(BaseXform);

module.exports = ExtLstXform;
//# sourceMappingURL=ext-lst-xform.js.map
