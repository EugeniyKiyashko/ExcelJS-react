{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["Sax","require","XmlStream","BaseXform","model","map","Object","values","forEach","xform","reset","obj","assign","parser","stream","Promise","resolve","reject","abort","error","removeAllListeners","on","unpipe","node","parseOpen","text","parseText","name","parseClose","createStream","promise","parse","pipe","xmlStream","render","xml","toXml","value","dflt","undefined","toString","attr","toAttribute","parseInt","parseFloat","module","exports"],"mappings":"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","sourcesContent":["const Sax = require('sax');\n\nconst XmlStream = require('../../utils/xml-stream');\n\n/* 'virtual' methods used as a form of documentation */\n/* eslint-disable class-methods-use-this */\n\n// Base class for Xforms\nclass BaseXform {\n  // constructor(/* model, name */) {}\n\n  // ============================================================\n  // Virtual Interface\n  prepare(/* model, options */) {\n    // optional preparation (mutation) of model so it is ready for write\n  }\n\n  render(/* xmlStream, model */) {\n    // convert model to xml\n  }\n\n  parseOpen(/* node */) {\n    // Sax Open Node event\n  }\n\n  parseText(/* node */) {\n    // Sax Text event\n  }\n\n  parseClose(/* name */) {\n    // Sax Close Node event\n  }\n\n  reconcile(/* model, options */) {\n    // optional post-parse step (opposite to prepare)\n  }\n\n  // ============================================================\n  reset() {\n    // to make sure parses don't bleed to next iteration\n    this.model = null;\n\n    // if we have a map - reset them too\n    if (this.map) {\n      Object.values(this.map).forEach(xform => {\n        if (xform instanceof BaseXform) {\n          xform.reset();\n        } else if (xform.xform) {\n          xform.xform.reset();\n        }\n      });\n    }\n  }\n\n  mergeModel(obj) {\n    // set obj's props to this.model\n    this.model = Object.assign(this.model || {}, obj);\n  }\n\n  parse(parser, stream) {\n    return new Promise((resolve, reject) => {\n      const abort = error => {\n        // Abandon ship! Prevent the parser from consuming any more resources\n        parser.removeAllListeners();\n        parser.on('error', () => {}); // Ignore any parse errors from the chunk being processed\n        stream.unpipe(parser);\n        reject(error);\n      };\n\n      parser.on('opentag', node => {\n        try {\n          this.parseOpen(node);\n        } catch (error) {\n          abort(error);\n        }\n      });\n      parser.on('text', text => {\n        try {\n          this.parseText(text);\n        } catch (error) {\n          abort(error);\n        }\n      });\n      parser.on('closetag', name => {\n        try {\n          if (!this.parseClose(name)) {\n            resolve(this.model);\n          }\n        } catch (error) {\n          abort(error);\n        }\n      });\n      parser.on('end', () => {\n        resolve(this.model);\n      });\n      parser.on('error', error => {\n        abort(error);\n      });\n    });\n  }\n\n  parseStream(stream) {\n    const parser = Sax.createStream(true, {});\n    const promise = this.parse(parser, stream);\n    stream.pipe(parser);\n\n    return promise;\n  }\n\n  get xml() {\n    // convenience function to get the xml of this.model\n    // useful for manager types that are built during the prepare phase\n    return this.toXml(this.model);\n  }\n\n  toXml(model) {\n    const xmlStream = new XmlStream();\n    this.render(xmlStream, model);\n    return xmlStream.xml;\n  }\n\n  // ============================================================\n  // Useful Utilities\n  static toAttribute(value, dflt) {\n    if ((value !== undefined) && (value !== dflt)) {\n      return value.toString();\n    }\n    return undefined;\n  }\n\n\n  static toStringAttribute(value, dflt) {\n    if (value !== dflt) {\n      return value;\n    }\n    return undefined;\n  }\n\n  static toStringValue(attr, dflt) {\n    return (attr === undefined) ? dflt : attr;\n  }\n\n  static toBoolAttribute(value, dflt) {\n    if ((value !== undefined) && (value !== dflt)) {\n      return value ? '1' : '0';\n    }\n    return undefined;\n  }\n\n  static toBoolValue(attr, dflt) {\n    return (attr === undefined) ? dflt : (attr === '1');\n  }\n\n  static toIntAttribute(value, dflt) {\n    return BaseXform.toAttribute(value, dflt);\n  }\n\n  static toIntValue(attr, dflt) {\n    return (attr === undefined) ? dflt : parseInt(attr, 10);\n  }\n\n  static toFloatAttribute(value, dflt) {\n    return BaseXform.toAttribute(value, dflt);\n  }\n\n  static toFloatValue(attr, dflt) {\n    return (attr === undefined) ? dflt : parseFloat(attr);\n  }\n\n\n}\n\nmodule.exports = BaseXform;\n"],"file":"base-xform.js"}